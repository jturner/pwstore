#!/bin/ksh
#
# Copyright (c) 2014 James Turner <james@calminferno.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

dir="${HOME}/.pwstore"
label=
method=usage
override=0
generate=0

usage() {
	echo "usage: ${0##*/} [-glov] [-a | -d] [label]"
	exit 1
}

version() {
	echo "${0##*/} 0.2"
	exit 0
}

encrypt_db() {
	echo "Encrypting pwstore database."
	reop -E -m "${dir}/pwstore.db" -p "${dir}/pubkey" -s "${dir}/seckey"
	[[ $? > 0 ]] && exit 1
	rm "${dir}/pwstore.db"
}

decrypt_db() {
	echo "Decrypting pwstore database (passpharse required)."
	reop -D -m "${dir}/pwstore.db" -p "${dir}/pubkey" -s "${dir}/seckey"
	[[ $? > 0 ]] && exit 1
}

init() {
	local create=0
	mkdir -m 0700 -p "${dir}"

	if [[ ! -f "${dir}/pubkey" || ! -f "${dir}/seckey" ]]; then
		echo "Initializing reop keypair and pwstore database."

		reop -G -p "${dir}/pubkey" -s "${dir}/seckey"
		[[ $? > 0 ]] && exit 1

		create=1
	fi

	if [[ $create == 1 || ! -f "${dir}/pwstore.db.enc" ]]; then
		echo "CREATE TABLE IF NOT EXISTS passwords (
		      id integer primary key autoincrement,
		      label text unique,
		      password text);" | sqlite3 "${dir}/pwstore.db"

		return 0
	fi

	return 1
}

list() {
	init; [[ $? == 0 ]] || decrypt_db

	echo
	echo "Passwords currently being stored for:"
	echo "SELECT label FROM passwords ORDER BY label ASC;" | sqlite3 "${dir}/pwstore.db"
	echo

	encrypt_db
}

show() {
	init; [[ $? == 0 ]] || decrypt_db

	local password=$(echo "SELECT password FROM passwords WHERE label = '${label}';" | sqlite3 "${dir}/pwstore.db")
	echo

	if [[ -z $password ]]; then
		echo "No password found for ${label}."
        else
		echo "Stored password for ${label}: ${password}"
	fi

	echo

	encrypt_db
}

add() {
	init; [[ $? == 0 ]] || decrypt_db
	echo

	if [[ $generate == 1 ]]; then
		local password=$(pwgen -s -y 15 1)
	else
		while :; do
			echo -n "New password for ${label} (will not echo): "
			stty -echo
			read resp
			local password=$resp
			stty echo
			echo

			echo -n "New password for ${label} (again): "
			stty -echo
			read resp
			stty echo
			echo

			if [[ $resp == "${password}" && -n "${password}" ]]; then
				echo
				break
			fi

			if [[ -z "${password}" ]]; then
				echo "Password is blank, try again."
			else
				echo "Passwords do not match, try again."
			fi
		done
	fi

	local id=$(echo "SELECT id FROM passwords WHERE label = '${label}';" | sqlite3 "${dir}/pwstore.db")
	local escaped_password=$(echo ${password} | sed "s/'/''/g")

	if [[ -n $id ]]; then
		if [[ $override == 1 ]]; then
			echo "UPDATE passwords set password = '${escaped_password}' WHERE id = ${id};" | sqlite3 "${dir}/pwstore.db"

			if [[ $generate == 1 ]]; then
				echo "Generated password for ${label}: ${password}"
			fi
		else
			echo "Password already exists for that label, use -o to override."
		fi
	else
		echo "INSERT INTO passwords (label, password)
		      values ('${label}', '${escaped_password}');" | sqlite3 "${dir}/pwstore.db"

		if [[ $generate == 1 ]]; then
			echo "Generated password for ${label}: ${password}"
		fi
	fi

	echo
	encrypt_db
}

delete() {
	init; [[ $? == 0 ]] || decrypt_db

	echo "DELETE FROM passwords WHERE label = '${label}';" | sqlite3 "${dir}/pwstore.db"

	encrypt_db
}

while getopts "a:d:ghlov" opt; do
	case $opt in
	a)	label=$OPTARG; method=add;;
	d)	label=$OPTARG; method=delete;;
	g)	generate=1;;
	l)	method=list;;
	o)	override=1;;
	v)	version;;
	h|*)	usage;;
	esac
done
shift $((OPTIND-1))

if [[ $# == 1 ]]; then
	label=$1; show
else
	$method
fi
